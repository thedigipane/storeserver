{"version":3,"sources":["App/layout/ScrollToTop/index.js","route.js","App/index.js","serviceWorker.js","store/reducers/auth.reducer.js","store/reducers/error.reducer.js","store/reducers/reducer.js","store/reducers/validatecomp.reducer.js","store/reducers/index.js","store/index.js","index.js","store/actions.js","config.js","store/actions/erroractions.js","store/actions/authactions.js","App/layout/Loader/index.js","store/actions/types.js","hoc/_Aux/index.js"],"names":["ScrollToTop","prevProps","this","props","location","window","scrollTo","children","React","Component","withRouter","route","path","exact","name","component","lazy","AdminLayout","Loadable","loader","loading","Loader","App","menu","routes","map","index","Route","key","render","fallback","Switch","Boolean","hostname","match","initialState","token","loadUserToken","isAuthenticated","isLoading","user","id","status","msg","isOpen","isTrigger","config","isFullScreen","reducer","state","action","trigger","open","type","actionTypes","collapseMenu","triggerIndex","indexOf","filter","item","layout","combineReducers","auth","USER_LOADING","USER_LOADED","payload","LOGIN_SUCCESS","setUserToken","LOGOUT_SUCCESS","AUTH_ERROR","LOGIN_FAIL","logoutUser","error","GET_ERRORS","CLEAR_ERRORS","Navreducer","validateroute","middleware","thunk","createStore","rootReducer","compose","applyMiddleware","createNotification","value","NotificationManager","info","success","warning","app","store","Store","BrowserRouter","basename","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","COLLAPSE_MENU","COLLAPSE_TOGGLE","FULL_SCREEN","FULL_SCREEN_EXIT","CHANGE_LAYOUT","NAV_CONTENT_LEAVE","NAV_COLLAPSE_LEAVE","defaultPath","preLayout","layoutType","navIconColor","headerBackColor","navBackColor","navBrandColor","navBackImage","rtlLayout","navFixedLayout","headerFixedLayout","boxLayout","navDropdownIcon","navListIcon","navActiveListColor","navListTitleColor","navListTitleHide","configBlock","layout6Background","layout6BackSize","prod","returnErrors","login","body","dispatch","axios","loadHeaders","result","console","log","data","catch","response","message","logout","callback","delete","params","refreshToken","loadRefreshToken","method","url","headers","qs","stringify","isUserAuthenticated","localStorage","setItem","split","removeItem","getItem","setNewToken","jwtdecode","jwt","decode","className","Aux"],"mappings":"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","file":"static/js/main.344c112a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withRouter } from 'react-router';\r\n\r\nclass ScrollToTop extends React.Component {\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location !== prevProps.location) {\r\n            window.scrollTo(0, 0)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);","import React from 'react';\r\n\r\n// const SignUp1 = React.lazy(() => import('./Demo/Authentication/SignUp/SignUp1'));\r\nconst Signin1 = React.lazy(() => import('./Demo/Authentication/SignIn/SignIn1'));\r\n\r\nconst route = [\r\n    // { path: '/auth/signup-1', exact: true, name: 'Signup 1', component: SignUp1 },\r\n    { path: '/auth/session', exact: true, name: 'Signin 1', component: Signin1 }\r\n];\r\n\r\nexport default route;","import React, { Component, Suspense } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Loadable from 'react-loadable';\n\nimport '../../node_modules/font-awesome/scss/font-awesome.scss';\n\nimport Loader from './layout/Loader'\nimport Aux from \"../hoc/_Aux\";\nimport ScrollToTop from './layout/ScrollToTop';\nimport routes from \"../route\";\n\n\nconst AdminLayout = Loadable({\n    loader: () => import('./layout/AdminLayout'),\n    loading: Loader\n});\nclass App extends Component {\n\n    render() {\n        const menu = routes.map((route, index) => {\n            return (route.component) ? (\n                <Route\n                    key={index}\n                    path={route.path}\n                    exact={route.exact}\n                    name={route.name}\n                    render={props => (\n                        <route.component {...props} />\n                    )} />\n            ) : (null);\n        });\n\n        return (\n            <Aux>\n                <ScrollToTop>\n                    <Suspense fallback={<Loader />}>\n                        <Switch>\n                            {menu}\n                            <Route path=\"/\" component={AdminLayout} />\n                        </Switch>\n                    </Suspense>\n                </ScrollToTop>\n            </Aux>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    USER_LOADING,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n} from '../actions/types';\r\nimport { setUserToken, logoutUser, loadUserToken } from '../actions/authactions';\r\nconst initialState = {\r\n    token: loadUserToken(),\r\n    isAuthenticated: null,\r\n    isLoading: false,\r\n    user: null\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        case USER_LOADED:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: true,\r\n                isLoading: false,\r\n                user: action.payload\r\n            }\r\n        case LOGIN_SUCCESS:\r\n            setUserToken(action.payload)\r\n            return {\r\n                ...state,\r\n                user: action.payload,\r\n                isAuthenticated: true,\r\n                isLoading: false\r\n            }\r\n        case LOGOUT_SUCCESS:\r\n        case AUTH_ERROR:\r\n        case LOGIN_FAIL:\r\n            logoutUser();\r\n            return {\r\n                ...state,\r\n                token: null,\r\n                isAuthenticated: null,\r\n                isLoading: false,\r\n                user: null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { GET_ERRORS, CLEAR_ERRORS } from '../actions/types';\r\n\r\nconst initialState = {\r\n    id: null,\r\n    status: null,\r\n    msg: {}\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return {\r\n                id: action.payload.id,\r\n                status: action.payload.status,\r\n                msg: action.payload.msg.error\r\n            }\r\n        case CLEAR_ERRORS:\r\n            return {\r\n                id: null,\r\n                status: null,\r\n                msg: {}\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as actionTypes from '../actions';\r\nimport config from '../../config';\r\n\r\nconst initialState = {\r\n    isOpen: [], //for active default menu\r\n    isTrigger: [], //for active default menu, set blank for horizontal\r\n    ...config,\r\n    isFullScreen: false, // static can't change\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    let trigger = [];\r\n    let open = [];\r\n\r\n    switch (action.type) {\r\n        case actionTypes.COLLAPSE_MENU:\r\n            return {\r\n                ...state,\r\n                collapseMenu: !state.collapseMenu\r\n            };\r\n        case actionTypes.COLLAPSE_TOGGLE:\r\n            if (action.menu.type === 'sub') {\r\n                open = state.isOpen;\r\n                trigger = state.isTrigger;\r\n\r\n                const triggerIndex = trigger.indexOf(action.menu.id);\r\n                if (triggerIndex > -1) {\r\n                    open = open.filter(item => item !== action.menu.id);\r\n                    trigger = trigger.filter(item => item !== action.menu.id);\r\n                }\r\n\r\n                if (triggerIndex === -1) {\r\n                    open = [...open, action.menu.id];\r\n                    trigger = [...trigger, action.menu.id];\r\n                }\r\n            } else {\r\n                open = state.isOpen;\r\n                const triggerIndex = (state.isTrigger).indexOf(action.menu.id);\r\n                trigger = (triggerIndex === -1) ? [action.menu.id] : [];\r\n                open = (triggerIndex === -1) ? [action.menu.id] : [];\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                isOpen: open,\r\n                isTrigger: trigger\r\n            };\r\n        case actionTypes.NAV_CONTENT_LEAVE:\r\n            return {\r\n                ...state,\r\n                isOpen: open,\r\n                isTrigger: trigger,\r\n            };\r\n        case actionTypes.NAV_COLLAPSE_LEAVE:\r\n            if (action.menu.type === 'sub') {\r\n                open = state.isOpen;\r\n                trigger = state.isTrigger;\r\n\r\n                const triggerIndex = trigger.indexOf(action.menu.id);\r\n                if (triggerIndex > -1) {\r\n                    open = open.filter(item => item !== action.menu.id);\r\n                    trigger = trigger.filter(item => item !== action.menu.id);\r\n                }\r\n                return {\r\n                    ...state,\r\n                    isOpen: open,\r\n                    isTrigger: trigger,\r\n                };\r\n            }\r\n            return {...state};\r\n        case actionTypes.FULL_SCREEN :\r\n            return {\r\n                ...state,\r\n                isFullScreen: !state.isFullScreen\r\n            };\r\n        case actionTypes.FULL_SCREEN_EXIT:\r\n            return {\r\n                ...state,\r\n                isFullScreen: false\r\n            };\r\n        case actionTypes.CHANGE_LAYOUT:\r\n            return {\r\n                ...state,\r\n                layout: action.layout\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","\r\nconst initialState = {\r\n    route:false\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_ROUTE':\r\n            return {...state, route: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport authReducer from './auth.reducer';\r\nimport errorReducer from './error.reducer';\r\nimport Navreducer from './reducer';\r\nimport validateRoute from './validatecomp.reducer';\r\nexport default combineReducers({\r\n    auth: authReducer,\r\n    error: errorReducer,\r\n    reducer: Navreducer,\r\n    validateroute: validateRoute\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nexport default createStore(rootReducer, initialState, compose(\r\n    applyMiddleware(...middleware),\r\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n))\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App/index';\nimport * as serviceWorker from './serviceWorker';\n// import reducer from './store/reducers/reducer';\nimport config from './config';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport Store from './store';\nimport 'react-notifications/lib/notifications.css';\n// const store = createStore(reducer);\n\nfunction createNotification(type, value) {\n    switch (type) {\n        case 'info':\n            NotificationManager.info(value, '', 5000);\n            break;\n        case 'success':\n            NotificationManager.success(value, '', 5000);\n            break;\n        case 'warning':\n            NotificationManager.warning(value, '', 5000);\n            break;\n        case 'error':\n            NotificationManager.error(value, '', 5000);\n            break;\n        default: break;\n    }\n};\nconst app = (\n    <Provider store={Store}>\n        <NotificationContainer  />\n        <BrowserRouter basename={config.basename} >\n            {/* basename=\"/datta-able\" */}\n            <App />\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nexport { createNotification }","export const COLLAPSE_MENU = 'COLLAPSE_MENU';\r\nexport const COLLAPSE_TOGGLE = 'COLLAPSE_TOGGLE';\r\nexport const FULL_SCREEN = 'FULL_SCREEN';\r\nexport const FULL_SCREEN_EXIT = 'FULL_SCREEN_EXIT';\r\nexport const CHANGE_LAYOUT = 'CHANGE_LAYOUT';\r\nexport const NAV_CONTENT_LEAVE = 'NAV_CONTENT_LEAVE';\r\nexport const NAV_COLLAPSE_LEAVE = 'NAV_COLLAPSE_LEAVE';","export default {\r\n    defaultPath: '/dashboard/default',\r\n    basename: '', // only at build time to set, like /datta-able\r\n    layout: 'vertical', // vertical, horizontal (not available in lite version)\r\n    preLayout: null, // (not available in lite version)\r\n    collapseMenu: false, // mini-menu\r\n    layoutType: 'menu-light', // menu-dark, (menu-light, dark are not available in lite version)\r\n    navIconColor: false,\r\n    headerBackColor: 'header-default', // header-default, (header-blue, header-red, header-purple, header-lightblue, header-dark are not available in lite version)\r\n    navBackColor: 'navbar-default', // navbar-default, (navbar-blue, navbar-red, navbar-purple, navbar-lightblue, navbar-dark are not available in lite version)\r\n    navBrandColor: 'brand-default', // brand-default, (brand-blue, brand-red, brand-purple, brand-lightblue, brand-dark are not available in lite version)\r\n    navBackImage: false, // not available in lite version\r\n    rtlLayout: false, // not available in lite version\r\n    navFixedLayout: true,\r\n    headerFixedLayout: false, // not available in lite version\r\n    boxLayout: false,\r\n    navDropdownIcon: 'style1', // style1, (style2, style3 are not available in lite version)\r\n    navListIcon: 'style1', // style1, (style2, style3, style4, style5, style6 are not available in lite version)\r\n    navActiveListColor: 'active-default', // active-default, (active-blue, active-red, active-purple, active-lightblue, active-dark are not available in lite version)\r\n    navListTitleColor: 'title-default', // title-default, (title-blue, title-red, title-purple, title-lightblue, title-dark are not available in lite version)\r\n    navListTitleHide: false, // not available in lite version\r\n    configBlock: false, // not available in lite version\r\n    layout6Background : 'linear-gradient(to right, #A445B2 0%, #D41872 52%, #FF0066 100%)', // used only for pre-layout = layout-6\r\n    layout6BackSize : '', // used only for pre-layout = layout-6\r\n    prod:'http://50.18.9.107:8080'\r\n};\r\n","import { CLEAR_ERRORS, GET_ERRORS } from './types';\r\n\r\nexport const returnErrors = (msg, status, id = null) => {\r\n    return {\r\n        type: GET_ERRORS,\r\n        payload: { msg, status, id }\r\n    }\r\n}\r\n\r\nexport const clearErrors = () => {\r\n    return {\r\n        type: CLEAR_ERRORS\r\n    }\r\n}\r\n","import {\r\n    USER_LOADING,\r\n    // USER_LOADED,\r\n    // AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n} from '../actions/types';\r\nimport config from '../../config';\r\n// import { Cookies } from 'react-cookie';\r\nimport { returnErrors } from './erroractions';\r\nimport axios from 'axios';\r\nimport qs from 'querystring';\r\nimport jwt from  'jsonwebtoken'; \r\nexport const loaduser = () => (dispatch, getSate) => {\r\n    console.log(loadHeaders(getSate))\r\n}\r\n\r\nexport const login = (body) => (dispatch) => {\r\n    dispatch({ type: USER_LOADING });\r\n    axios(loadHeaders(`${config.prod}/api/session`, body, 'POST')).then(result => {\r\n        console.log(result)\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: result.data\r\n        })\r\n    }).catch(error => {\r\n        if (error.response && error.response.status && (error.response.status === 404 || error.response.status === 400 || error.response.status === 401 || error.response.status === 500)) {\r\n            dispatch(returnErrors(error.response.data, error.response.status, LOGIN_FAIL));\r\n        } else if (error) {\r\n            dispatch(returnErrors(error.message, '', LOGIN_FAIL))\r\n        }\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        });\r\n    })\r\n}\r\n\r\nexport const logout = (callback) => (dispatch) => {\r\n    axios.delete(`${config.prod}/api/token`, {\r\n        params: {\r\n            refreshToken: loadRefreshToken()\r\n        }\r\n    }).then(result => {\r\n        dispatch({ type: LOGOUT_SUCCESS });\r\n        callback();\r\n    }).catch(error => {\r\n        console.log(error);\r\n    })\r\n\r\n}\r\nexport const loadHeaders = (path, data, method) => {\r\n    let options = {\r\n        url: path,\r\n        method: method,\r\n        headers: {\r\n            'content-type': 'application/x-www-form-urlencoded'\r\n        },\r\n        data: qs.stringify(data)\r\n    }\r\n    return options;\r\n}\r\n\r\nexport const isUserAuthenticated = () => {\r\n    return true;\r\n}\r\nexport const setUserToken = (user) => {\r\n    localStorage.setItem('mannkamal_user_token', user.token.split(' ')[1]);\r\n    localStorage.setItem('mannkamal_user_refresh', user.refreshToken);\r\n}\r\nexport const logoutUser = () => {\r\n    localStorage.removeItem('mannkamal_user_token');\r\n    localStorage.removeItem('mannkamal_user_refresh');\r\n}\r\nexport const loadUserToken = () => {\r\n    return localStorage.getItem('mannkamal_user_token');\r\n}\r\nexport const loadRefreshToken = () => {\r\n    return localStorage.getItem('mannkamal_user_refresh');\r\n}\r\nexport const setNewToken = (token) => {\r\n    localStorage.setItem('mannkamal_user_token', token.split(' ')[1]);\r\n}\r\nexport const jwtdecode = () => {\r\n   return jwt.decode(loadUserToken());\r\n}","import React from 'react';\r\n\r\nconst loader = () => {\r\n    return (\r\n        <div className=\"loader-bg\">\r\n            <div className=\"loader-track\">\r\n                <div className=\"loader-fill\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default loader;","export const USER_LOADING = 'USER_LOADING';\r\nexport const USER_LOADED = 'USER_LOADED';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const GET_ERRORS = 'GET_ERRORS';\r\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\r\nexport const LOGOUT_SUCCESS= 'LOGOUT_SUCCESS';","const Aux = (props) => props.children;\r\n\r\nexport default Aux;"],"sourceRoot":""}